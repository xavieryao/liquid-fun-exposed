/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_liquidfunJNI = NULL;
    jmethodID director_methids[9];
  }
}

#include "Box2D/Box2D.h"


    static jbyteArray sDebugDrawPosByteArray = NULL;
    static int sDebugDrawPosArraySize = 0;
    static jbyteArray sDebugDrawColorByteArray = NULL;
    static int sDebugDrawColorArraySize = 0;


    int b2Draw_SetUpDebugDrawArray(JNIEnv* jenv,
                                   jbyteArray* byteArray,
                                   int currSize,
                                   int newSize) {
        if (currSize != newSize) {
	        jenv->DeleteGlobalRef(*byteArray);
	        jbyteArray tempArray = jenv->NewByteArray(newSize);
	        (*byteArray) = (jbyteArray)jenv->NewGlobalRef(tempArray);
	        return newSize;
        }
        return currSize;
    }


enum b2ExceptionType {
    BUFFER_TOO_SMALL,
    PARTICLE_INDEX_OUTOFBOUNDS,
    NUM_ERRORS,
    NO_EXCEPTIONS,
};

struct b2Exception {
    const char* jniType;
    const char* errorMsg;
} g_liquidfunExceptions[NUM_ERRORS] = {
    {"java/lang/IllegalArgumentException",
         "Supplied buffer is too small"},
    {"java/lang/ArrayIndexOutOfBoundsException",
        "Particle index is out of bounds. Check startIndex and numParticles."},
};



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "liquidfun_wrap.h"

SwigDirector_Draw::SwigDirector_Draw(JNIEnv *jenv) : b2Draw(), Swig::Director(jenv) {
}

SwigDirector_Draw::~SwigDirector_Draw() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Draw::DrawPolygon(b2Vec2 const *vertices, int32 vertexCount, b2Color const &color) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jobject jvertices = 0 ;
  jint jvertexCount  ;
  jlong jcolor = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method b2Draw::DrawPolygon.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      int size = sizeof(b2Vec2) * vertexCount;
      sDebugDrawPosArraySize =
      b2Draw_SetUpDebugDrawArray(
        jenv,
        &sDebugDrawPosByteArray,
        sDebugDrawPosArraySize,
        size);
      jenv->SetByteArrayRegion(sDebugDrawPosByteArray, 0, size, (jbyte *)vertices);
      jvertices = sDebugDrawPosByteArray;
    }
    jvertexCount = (jint) vertexCount;
    *(b2Color **)&jcolor = (b2Color *) &color; 
    jenv->CallStaticVoidMethod(Swig::jclass_liquidfunJNI, Swig::director_methids[0], swigjobj, jvertices, jvertexCount, jcolor);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Draw::DrawSolidPolygon(b2Vec2 const *vertices, int32 vertexCount, b2Color const &color) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jobject jvertices = 0 ;
  jint jvertexCount  ;
  jlong jcolor = 0 ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method b2Draw::DrawSolidPolygon.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      int size = sizeof(b2Vec2) * vertexCount;
      sDebugDrawPosArraySize =
      b2Draw_SetUpDebugDrawArray(
        jenv,
        &sDebugDrawPosByteArray,
        sDebugDrawPosArraySize,
        size);
      jenv->SetByteArrayRegion(sDebugDrawPosByteArray, 0, size, (jbyte *)vertices);
      jvertices = sDebugDrawPosByteArray;
    }
    jvertexCount = (jint) vertexCount;
    *(b2Color **)&jcolor = (b2Color *) &color; 
    jenv->CallStaticVoidMethod(Swig::jclass_liquidfunJNI, Swig::director_methids[1], swigjobj, jvertices, jvertexCount, jcolor);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Draw::DrawCircle(b2Vec2 const &center, float32 radius, b2Color const &color) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcenter = 0 ;
  jfloat jradius  ;
  jlong jcolor = 0 ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method b2Draw::DrawCircle.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(b2Vec2 **)&jcenter = (b2Vec2 *) &center; 
    jradius = (jfloat) radius;
    *(b2Color **)&jcolor = (b2Color *) &color; 
    jenv->CallStaticVoidMethod(Swig::jclass_liquidfunJNI, Swig::director_methids[2], swigjobj, jcenter, jradius, jcolor);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Draw::DrawSolidCircle(b2Vec2 const &center, float32 radius, b2Vec2 const &axis, b2Color const &color) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcenter = 0 ;
  jfloat jradius  ;
  jlong jaxis = 0 ;
  jlong jcolor = 0 ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method b2Draw::DrawSolidCircle.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(b2Vec2 **)&jcenter = (b2Vec2 *) &center; 
    jradius = (jfloat) radius;
    *(b2Vec2 **)&jaxis = (b2Vec2 *) &axis; 
    *(b2Color **)&jcolor = (b2Color *) &color; 
    jenv->CallStaticVoidMethod(Swig::jclass_liquidfunJNI, Swig::director_methids[3], swigjobj, jcenter, jradius, jaxis, jcolor);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Draw::DrawParticles(b2Vec2 const *centers, float32 radius, b2ParticleColor const *colors, int32 count) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jobject jcenters = 0 ;
  jfloat jradius  ;
  jobject jcolors = 0 ;
  jint jcount  ;
  
  if (!swig_override[4]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method b2Draw::DrawParticles.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    {
      int size = sizeof(b2Vec2) * count;
      sDebugDrawPosArraySize =
      b2Draw_SetUpDebugDrawArray(
        jenv,
        &sDebugDrawPosByteArray,
        sDebugDrawPosArraySize,
        size);
      jenv->SetByteArrayRegion(sDebugDrawPosByteArray, 0, size, (jbyte *)centers);
      jcenters = sDebugDrawPosByteArray;
    }
    jradius = (jfloat) radius;
    {
      if (colors != NULL) {
        int size = sizeof(b2ParticleColor) * count;
        sDebugDrawColorArraySize =
        b2Draw_SetUpDebugDrawArray(
          jenv,
          &sDebugDrawColorByteArray,
          sDebugDrawColorArraySize,
          size);
        jenv->SetByteArrayRegion(sDebugDrawColorByteArray, 0, size, (jbyte *)colors);
        jcolors = sDebugDrawColorByteArray;
      } else {
        jcolors = NULL;
      }
    }
    jcount = (jint) count;
    jenv->CallStaticVoidMethod(Swig::jclass_liquidfunJNI, Swig::director_methids[4], swigjobj, jcenters, jradius, jcolors, jcount);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Draw::DrawSegment(b2Vec2 const &p1, b2Vec2 const &p2, b2Color const &color) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jp1 = 0 ;
  jlong jp2 = 0 ;
  jlong jcolor = 0 ;
  
  if (!swig_override[5]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method b2Draw::DrawSegment.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(b2Vec2 **)&jp1 = (b2Vec2 *) &p1; 
    *(b2Vec2 **)&jp2 = (b2Vec2 *) &p2; 
    *(b2Color **)&jcolor = (b2Color *) &color; 
    jenv->CallStaticVoidMethod(Swig::jclass_liquidfunJNI, Swig::director_methids[5], swigjobj, jp1, jp2, jcolor);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Draw::DrawTransform(b2Transform const &xf) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jxf = 0 ;
  
  if (!swig_override[6]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method b2Draw::DrawTransform.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(b2Transform **)&jxf = (b2Transform *) &xf; 
    jenv->CallStaticVoidMethod(Swig::jclass_liquidfunJNI, Swig::director_methids[6], swigjobj, jxf);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Draw::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "drawPolygon", "([BILcom/google/fpl/liquidfun/Color;)V", NULL 
    },
    {
      "drawSolidPolygon", "([BILcom/google/fpl/liquidfun/Color;)V", NULL 
    },
    {
      "drawCircle", "(Lcom/google/fpl/liquidfun/Vec2;FLcom/google/fpl/liquidfun/Color;)V", NULL 
    },
    {
      "drawSolidCircle", "(Lcom/google/fpl/liquidfun/Vec2;FLcom/google/fpl/liquidfun/Vec2;Lcom/google/fpl/liquidfun/Color;)V", NULL 
    },
    {
      "drawParticles", "([BF[BI)V", NULL 
    },
    {
      "drawSegment", "(Lcom/google/fpl/liquidfun/Vec2;Lcom/google/fpl/liquidfun/Vec2;Lcom/google/fpl/liquidfun/Color;)V", NULL 
    },
    {
      "drawTransform", "(Lcom/google/fpl/liquidfun/Transform;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/fpl/liquidfun/Draw");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_QueryCallback::SwigDirector_QueryCallback(JNIEnv *jenv) : b2QueryCallback(), Swig::Director(jenv) {
}

SwigDirector_QueryCallback::~SwigDirector_QueryCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_QueryCallback::ReportFixture(b2Fixture *fixture) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jfixture = 0 ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method b2QueryCallback::ReportFixture.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((b2Fixture **)&jfixture) = (b2Fixture *) fixture; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_liquidfunJNI, Swig::director_methids[7], swigjobj, jfixture);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_QueryCallback::ReportParticle(b2ParticleSystem const *particleSystem, int32 index) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jparticleSystem = 0 ;
  jint jindex  ;
  
  if (!swig_override[1]) {
    return b2QueryCallback::ReportParticle(particleSystem,index);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((b2ParticleSystem **)&jparticleSystem) = (b2ParticleSystem *) particleSystem; 
    jindex = (jint) index;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_liquidfunJNI, Swig::director_methids[8], swigjobj, jparticleSystem, jindex);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_QueryCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "reportFixture", "(Lcom/google/fpl/liquidfun/Fixture;)Z", NULL 
    },
    {
      "reportParticle", "(Lcom/google/fpl/liquidfun/ParticleSystem;I)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/google/fpl/liquidfun/QueryCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 2; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_B2_1ASSERT_1ENABLED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1pi_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(3.14159265359);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_LIQUIDFUN_1EXTERNAL_1LANGUAGE_1API_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxManifoldPoints_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxPolygonVertices_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1aabbExtension_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1aabbMultiplier_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(2.0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1linearSlop_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.005);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1angularSlop_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)((2.0/180.0*3.14159265359));
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1polygonRadius_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)((2.0*0.005));
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxSubSteps_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(8);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxTOIContacts_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(32);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1velocityThreshold_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(1.0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxLinearCorrection_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxAngularCorrection_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)((8.0/180.0*3.14159265359));
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxTranslation_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(2.0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxTranslationSquared_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)((2.0*2.0));
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxRotation_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)((0.5*3.14159265359));
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxRotationSquared_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(((0.5*3.14159265359)*(0.5*3.14159265359)));
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1baumgarte_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1toiBaugarte_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.75);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1invalidParticleIndex_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((-1));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxParticleIndex_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x7FFFFFFF);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1particleStride_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.75);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1minParticleWeight_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(1.0);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxParticlePressure_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.25);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxParticleForce_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxTriadDistance_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1maxTriadDistanceSquared_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((2*2));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1minParticleSystemBufferCapacity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(256);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1barrierCollisionTime_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(2.5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1timeToSleep_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1linearSleepTolerance_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.01);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI__1angularSleepTolerance_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)((2.0/180.0*3.14159265359));
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Version_1major_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2Version *arg1 = (b2Version *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Version **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->major = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Version_1major_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2Version *arg1 = (b2Version *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Version **)&jarg1; 
  result = (int32) ((arg1)->major);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Version_1minor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2Version *arg1 = (b2Version *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Version **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->minor = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Version_1minor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2Version *arg1 = (b2Version *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Version **)&jarg1; 
  result = (int32) ((arg1)->minor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Version_1revision_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2Version *arg1 = (b2Version *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Version **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->revision = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Version_1revision_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2Version *arg1 = (b2Version *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Version **)&jarg1; 
  result = (int32) ((arg1)->revision);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1Version(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2Version *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2Version *)new b2Version();
  *(b2Version **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1Version(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2Version *arg1 = (b2Version *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2Version **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_MassData_1mass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2MassData **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->mass = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_MassData_1mass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2MassData **)&jarg1; 
  result = (float32) ((arg1)->mass);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_MassData_1center_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2MassData **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_MassData_1center_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2MassData *arg1 = (b2MassData *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2MassData **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->center);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_MassData_1I_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2MassData **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->I = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_MassData_1I_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2MassData *arg1 = (b2MassData *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2MassData **)&jarg1; 
  result = (float32) ((arg1)->I);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1MassData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2MassData *arg1 = (b2MassData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2MassData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1Shape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2Shape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Shape_1getChildCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Shape **)&jarg1; 
  result = (int32)((b2Shape const *)arg1)->GetChildCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Shape_1testPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Transform *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(b2Shape **)&jarg1; 
  arg2 = *(b2Transform **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Transform const & reference is null");
    return 0;
  } 
  arg3 = *(b2Vec2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return 0;
  } 
  result = (bool)((b2Shape const *)arg1)->TestPoint((b2Transform const &)*arg2,(b2Vec2 const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Shape_1computeMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Shape **)&jarg1; 
  arg2 = *(b2MassData **)&jarg2; 
  arg3 = (float32)jarg3; 
  ((b2Shape const *)arg1)->ComputeMass(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Shape_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Shape::Type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Shape **)&jarg1; 
  arg2 = (b2Shape::Type)jarg2; 
  if (arg1) (arg1)->m_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Shape_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  b2Shape::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Shape **)&jarg1; 
  result = (b2Shape::Type) ((arg1)->m_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Shape_1radius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Shape *arg1 = (b2Shape *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Shape **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->m_radius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Shape_1radius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Shape *arg1 = (b2Shape *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Shape **)&jarg1; 
  result = (float32) ((arg1)->m_radius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1CircleShape(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2CircleShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2CircleShape *)new b2CircleShape();
  *(b2CircleShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_CircleShape_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2CircleShape **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetPosition(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_CircleShape_1getPositionX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2CircleShape **)&jarg1; 
  result = (float32)(arg1)->GetPositionX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_CircleShape_1getPositionY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2CircleShape **)&jarg1; 
  result = (float32)(arg1)->GetPositionY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1CircleShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2CircleShape *arg1 = (b2CircleShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2CircleShape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1EdgeShape(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2EdgeShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2EdgeShape *)new b2EdgeShape();
  *(b2EdgeShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_EdgeShape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  float32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2EdgeShape **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = (float32)jarg4; 
  arg5 = (float32)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1EdgeShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2EdgeShape *arg1 = (b2EdgeShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2EdgeShape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1PolygonShape(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2PolygonShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2PolygonShape *)new b2PolygonShape();
  *(b2PolygonShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_PolygonShape_1setAsBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2PolygonShape **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetAsBox(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_PolygonShape_1setCentroid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2PolygonShape **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetCentroid(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_PolygonShape_1setAsBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  float32 arg5 ;
  float32 arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2PolygonShape **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = (float32)jarg4; 
  arg5 = (float32)jarg5; 
  arg6 = (float32)jarg6; 
  (arg1)->SetAsBox(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1PolygonShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2PolygonShape *arg1 = (b2PolygonShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2PolygonShape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1Color_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2Color *)new b2Color();
  *(b2Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1Color_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float32 arg1 ;
  float32 arg2 ;
  float32 arg3 ;
  b2Color *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  result = (b2Color *)new b2Color(arg1,arg2,arg3);
  *(b2Color **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Color **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = (float32)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Color_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Color **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Color_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Color *arg1 = (b2Color *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Color **)&jarg1; 
  result = (float32) ((arg1)->r);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Color_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Color **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Color_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Color *arg1 = (b2Color *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Color **)&jarg1; 
  result = (float32) ((arg1)->g);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Color_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Color *arg1 = (b2Color *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Color **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Color_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Color *arg1 = (b2Color *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Color **)&jarg1; 
  result = (float32) ((arg1)->b);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1Color(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2Color *arg1 = (b2Color *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2Color **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1Draw(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2Draw *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2Draw *)new SwigDirector_Draw(jenv);
  *(b2Draw **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1Draw(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2Draw **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1setFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->SetFlags(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1getFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Draw **)&jarg1; 
  result = (uint32)((b2Draw const *)arg1)->GetFlags();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1appendFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->AppendFlags(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1clearFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = (uint32)jarg2; 
  (arg1)->ClearFlags(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1drawPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  b2Color *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = *(b2Color **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Color const & reference is null");
    return ;
  } 
  (arg1)->DrawPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1drawSolidPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  int32 arg3 ;
  b2Color *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = *(b2Color **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Color const & reference is null");
    return ;
  } 
  (arg1)->DrawSolidPolygon((b2Vec2 const *)arg2,arg3,(b2Color const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1drawCircle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  b2Color *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg3 = (float32)jarg3; 
  arg4 = *(b2Color **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Color const & reference is null");
    return ;
  } 
  (arg1)->DrawCircle((b2Vec2 const &)*arg2,arg3,(b2Color const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1drawSolidCircle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  b2Vec2 *arg4 = 0 ;
  b2Color *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg3 = (float32)jarg3; 
  arg4 = *(b2Vec2 **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg5 = *(b2Color **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Color const & reference is null");
    return ;
  } 
  (arg1)->DrawSolidCircle((b2Vec2 const &)*arg2,arg3,(b2Vec2 const &)*arg4,(b2Color const &)*arg5);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1drawParticles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jfloat jarg3, jobject jarg4, jint jarg5) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  float32 arg3 ;
  b2ParticleColor *arg4 = (b2ParticleColor *) 0 ;
  int32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = *(b2ParticleColor **)&jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->DrawParticles((b2Vec2 const *)arg2,arg3,(b2ParticleColor const *)arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1drawSegment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  b2Color *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg3 = *(b2Vec2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg4 = *(b2Color **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Color const & reference is null");
    return ;
  } 
  (arg1)->DrawSegment((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,(b2Color const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1drawTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2Draw *arg1 = (b2Draw *) 0 ;
  b2Transform *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Draw **)&jarg1; 
  arg2 = *(b2Transform **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Transform const & reference is null");
    return ;
  } 
  (arg1)->DrawTransform((b2Transform const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  b2Draw *obj = *((b2Draw **)&objarg);
  (void)jcls;
  SwigDirector_Draw *director = dynamic_cast<SwigDirector_Draw *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Draw_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  b2Draw *obj = *((b2Draw **)&objarg);
  SwigDirector_Draw *director = dynamic_cast<SwigDirector_Draw *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1Vec2_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2Vec2 *)new b2Vec2();
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1Vec2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float32 arg1 ;
  float32 arg2 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  result = (b2Vec2 *)new b2Vec2(arg1,arg2);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Vec2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Vec2 **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->Set(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Vec2_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Vec2 **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Vec2_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Vec2 **)&jarg1; 
  result = (float32) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Vec2_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Vec2 **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Vec2_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Vec2 **)&jarg1; 
  result = (float32) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1Vec2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2Vec2 *arg1 = (b2Vec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2Vec2 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1Transform(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2Transform *)new b2Transform();
  *(b2Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Transform_1setIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Transform **)&jarg1; 
  (arg1)->SetIdentity();
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Transform_1getPositionX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Transform *arg1 = (b2Transform *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Transform **)&jarg1; 
  result = (float32)(arg1)->GetPositionX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Transform_1getPositionY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Transform *arg1 = (b2Transform *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Transform **)&jarg1; 
  result = (float32)(arg1)->GetPositionY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Transform_1getRotationSin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Transform *arg1 = (b2Transform *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Transform **)&jarg1; 
  result = (float32)(arg1)->GetRotationSin();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Transform_1getRotationCos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Transform *arg1 = (b2Transform *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Transform **)&jarg1; 
  result = (float32)(arg1)->GetRotationCos();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1Transform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2Transform *arg1 = (b2Transform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2Transform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1BodyDef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2BodyDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2BodyDef *)new b2BodyDef();
  *(b2BodyDef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetPosition(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2BodyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = (b2BodyType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2BodyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (b2BodyType) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->position);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (float32) ((arg1)->angle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1linearVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->linearVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1linearVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->linearVelocity);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1angularVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angularVelocity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1angularVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (float32) ((arg1)->angularVelocity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1linearDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->linearDamping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1linearDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (float32) ((arg1)->linearDamping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1angularDamping_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angularDamping = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1angularDamping_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (float32) ((arg1)->angularDamping);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1allowSleep_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->allowSleep = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1allowSleep_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (bool) ((arg1)->allowSleep);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1awake_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->awake = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1awake_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (bool) ((arg1)->awake);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1fixedRotation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fixedRotation = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1fixedRotation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (bool) ((arg1)->fixedRotation);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1bullet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bullet = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1bullet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (bool) ((arg1)->bullet);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1active_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->active = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1active_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (bool) ((arg1)->active);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1gravityScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->gravityScale = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_BodyDef_1gravityScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2BodyDef **)&jarg1; 
  result = (float32) ((arg1)->gravityScale);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1BodyDef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2BodyDef *arg1 = (b2BodyDef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2BodyDef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1createFixture_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2FixtureDef *arg2 = (b2FixtureDef *) 0 ;
  b2Fixture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2FixtureDef **)&jarg2; 
  result = (b2Fixture *)(arg1)->CreateFixture((b2FixtureDef const *)arg2);
  *(b2Fixture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1createFixture_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  float32 arg3 ;
  b2Fixture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Shape **)&jarg2; 
  arg3 = (float32)jarg3; 
  result = (b2Fixture *)(arg1)->CreateFixture((b2Shape const *)arg2,arg3);
  *(b2Fixture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1destroyFixture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Fixture **)&jarg2; 
  (arg1)->DestroyFixture(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg3 = (float32)jarg3; 
  (arg1)->SetTransform((b2Vec2 const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Transform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2Transform *) &((b2Body const *)arg1)->GetTransform();
  *(b2Transform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2Vec2 *) &((b2Body const *)arg1)->GetPosition();
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (float32)((b2Body const *)arg1)->GetAngle();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getWorldCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2Vec2 *) &((b2Body const *)arg1)->GetWorldCenter();
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getLocalCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2Vec2 *) &((b2Body const *)arg1)->GetLocalCenter();
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setLinearVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  (arg1)->SetLinearVelocity((b2Vec2 const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getLinearVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2Vec2 *) &((b2Body const *)arg1)->GetLinearVelocity();
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetAngularVelocity(arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getAngularVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (float32)((b2Body const *)arg1)->GetAngularVelocity();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1applyForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg3 = *(b2Vec2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->ApplyForce((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1applyForceToCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->ApplyForceToCenter((b2Vec2 const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1applyTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jboolean jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ApplyTorque(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1applyLinearImpulse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg3 = *(b2Vec2 **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->ApplyLinearImpulse((b2Vec2 const &)*arg2,(b2Vec2 const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1applyAngularImpulse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jboolean jarg3) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ApplyAngularImpulse(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (float32)((b2Body const *)arg1)->GetMass();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getInertia(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (float32)((b2Body const *)arg1)->GetInertia();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getMassData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2MassData **)&jarg2; 
  ((b2Body const *)arg1)->GetMassData(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setMassData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2MassData *arg2 = (b2MassData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2MassData **)&jarg2; 
  (arg1)->SetMassData((b2MassData const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1resetMassData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  b2Body *arg1 = (b2Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  (arg1)->ResetMassData();
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getWorldPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetWorldPoint((b2Vec2 const &)*arg2);
  *(b2Vec2 **)&jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getWorldVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetWorldVector((b2Vec2 const &)*arg2);
  *(b2Vec2 **)&jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getLocalPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetLocalPoint((b2Vec2 const &)*arg2);
  *(b2Vec2 **)&jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getLocalVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetLocalVector((b2Vec2 const &)*arg2);
  *(b2Vec2 **)&jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getLinearVelocityFromWorldPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetLinearVelocityFromWorldPoint((b2Vec2 const &)*arg2);
  *(b2Vec2 **)&jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getLinearVelocityFromLocalPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Vec2 *arg2 = 0 ;
  b2Vec2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return 0;
  } 
  result = ((b2Body const *)arg1)->GetLinearVelocityFromLocalPoint((b2Vec2 const &)*arg2);
  *(b2Vec2 **)&jresult = new b2Vec2((const b2Vec2 &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getLinearDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (float32)((b2Body const *)arg1)->GetLinearDamping();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setLinearDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetLinearDamping(arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getAngularDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (float32)((b2Body const *)arg1)->GetAngularDamping();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setAngularDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetAngularDamping(arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getGravityScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (float32)((b2Body const *)arg1)->GetGravityScale();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setGravityScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetGravityScale(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  b2BodyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = (b2BodyType)jarg2; 
  (arg1)->SetType(arg2);
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2BodyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2BodyType)((b2Body const *)arg1)->GetType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setBullet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBullet(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1isBullet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (bool)((b2Body const *)arg1)->IsBullet();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setSleepingAllowed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetSleepingAllowed(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1isSleepingAllowed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (bool)((b2Body const *)arg1)->IsSleepingAllowed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setAwake(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAwake(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1isAwake(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (bool)((b2Body const *)arg1)->IsAwake();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetActive(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1isActive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (bool)((b2Body const *)arg1)->IsActive();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setFixedRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2Body *arg1 = (b2Body *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFixedRotation(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1isFixedRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (bool)((b2Body const *)arg1)->IsFixedRotation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getFixtureList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Fixture *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2Fixture *)(arg1)->GetFixtureList();
  *(b2Fixture **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getJointList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2JointEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2JointEdge *)(arg1)->GetJointList();
  *(b2JointEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getContactList_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2ContactEdge *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2ContactEdge *)(arg1)->GetContactList();
  *(b2ContactEdge **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getNext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2Body *)(arg1)->GetNext();
  *(b2Body **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getWorld_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  b2World *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (b2World *)(arg1)->GetWorld();
  *(b2World **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1dump(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  b2Body *arg1 = (b2Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  (arg1)->Dump();
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getPositionX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (float32)((b2Body const *)arg1)->GetPositionX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1getPositionY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2Body *arg1 = (b2Body *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  result = (float32)((b2Body const *)arg1)->GetPositionY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_Body_1setTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  b2Body *arg1 = (b2Body *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Body **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = (float32)jarg4; 
  (arg1)->SetTransform(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_FixtureDef_1shape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2FixtureDef **)&jarg1; 
  arg2 = *(b2Shape **)&jarg2; 
  if (arg1) (arg1)->shape = (b2Shape const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_FixtureDef_1shape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  b2Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2FixtureDef **)&jarg1; 
  result = (b2Shape *) ((arg1)->shape);
  *(b2Shape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1FixtureDef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2FixtureDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2FixtureDef *)new b2FixtureDef();
  *(b2FixtureDef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1FixtureDef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2FixtureDef *arg1 = (b2FixtureDef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2FixtureDef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1World(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float32 arg1 ;
  float32 arg2 ;
  b2World *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  result = (b2World *)new b2World(arg1,arg2);
  *(b2World **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1World(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2World *arg1 = (b2World *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2World **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_World_1setDebugDraw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2World *arg1 = (b2World *) 0 ;
  b2Draw *arg2 = (b2Draw *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2World **)&jarg1; 
  arg2 = *(b2Draw **)&jarg2; 
  (arg1)->SetDebugDraw(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_World_1createBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2World *arg1 = (b2World *) 0 ;
  b2BodyDef *arg2 = (b2BodyDef *) 0 ;
  b2Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2World **)&jarg1; 
  arg2 = *(b2BodyDef **)&jarg2; 
  result = (b2Body *)(arg1)->CreateBody((b2BodyDef const *)arg2);
  *(b2Body **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_World_1destroyBody(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2World *arg1 = (b2World *) 0 ;
  b2Body *arg2 = (b2Body *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2World **)&jarg1; 
  arg2 = *(b2Body **)&jarg2; 
  (arg1)->DestroyBody(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_World_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jint jarg3, jint jarg4, jint jarg5) {
  b2World *arg1 = (b2World *) 0 ;
  float32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2World **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->Step(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_World_1drawDebugData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  b2World *arg1 = (b2World *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2World **)&jarg1; 
  (arg1)->DrawDebugData();
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_World_1getBodyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2World *arg1 = (b2World *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2World **)&jarg1; 
  result = (int32)((b2World const *)arg1)->GetBodyCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_World_1createParticleSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2World *arg1 = (b2World *) 0 ;
  b2ParticleSystemDef *arg2 = (b2ParticleSystemDef *) 0 ;
  b2ParticleSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2World **)&jarg1; 
  arg2 = *(b2ParticleSystemDef **)&jarg2; 
  result = (b2ParticleSystem *)(arg1)->CreateParticleSystem((b2ParticleSystemDef const *)arg2);
  *(b2ParticleSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_World_1setGravity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  b2World *arg1 = (b2World *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2World **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetGravity(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_World_1getBodyList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2World *arg1 = (b2World *) 0 ;
  b2Body *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2World **)&jarg1; 
  result = (b2Body *)(arg1)->GetBodyList();
  *(b2Body **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1QueryCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2QueryCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2QueryCallback *)new SwigDirector_QueryCallback(jenv);
  *(b2QueryCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1QueryCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2QueryCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_QueryCallback_1reportFixture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ;
  b2Fixture *arg2 = (b2Fixture *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2QueryCallback **)&jarg1; 
  arg2 = *(b2Fixture **)&jarg2; 
  result = (bool)(arg1)->ReportFixture(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_QueryCallback_1reportParticle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ;
  b2ParticleSystem *arg2 = (b2ParticleSystem *) 0 ;
  int32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2QueryCallback **)&jarg1; 
  arg2 = *(b2ParticleSystem **)&jarg2; 
  arg3 = (int32)jarg3; 
  result = (bool)(arg1)->ReportParticle((b2ParticleSystem const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_QueryCallback_1reportParticleSwigExplicitQueryCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  b2QueryCallback *arg1 = (b2QueryCallback *) 0 ;
  b2ParticleSystem *arg2 = (b2ParticleSystem *) 0 ;
  int32 arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2QueryCallback **)&jarg1; 
  arg2 = *(b2ParticleSystem **)&jarg2; 
  arg3 = (int32)jarg3; 
  result = (bool)(arg1)->b2QueryCallback::ReportParticle((b2ParticleSystem const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_QueryCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  b2QueryCallback *obj = *((b2QueryCallback **)&objarg);
  (void)jcls;
  SwigDirector_QueryCallback *director = dynamic_cast<SwigDirector_QueryCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_QueryCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  b2QueryCallback *obj = *((b2QueryCallback **)&objarg);
  SwigDirector_QueryCallback *director = dynamic_cast<SwigDirector_QueryCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1ParticleColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2ParticleColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2ParticleColor *)new b2ParticleColor();
  *(b2ParticleColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1ParticleColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  uint8 arg1 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  b2ParticleColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8)jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  result = (b2ParticleColor *)new b2ParticleColor(arg1,arg2,arg3,arg4);
  *(b2ParticleColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1ParticleColor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2Color *arg1 = 0 ;
  b2ParticleColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2Color **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Color const & reference is null");
    return 0;
  } 
  result = (b2ParticleColor *)new b2ParticleColor((b2Color const &)*arg1);
  *(b2ParticleColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1isZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  result = (bool)((b2ParticleColor const *)arg1)->IsZero();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3, jshort jarg4, jshort jarg5) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  uint8 arg3 ;
  uint8 arg4 ;
  uint8 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  arg2 = (uint8)jarg2; 
  arg3 = (uint8)jarg3; 
  arg4 = (uint8)jarg4; 
  arg5 = (uint8)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  b2Color *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  arg2 = *(b2Color **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Color const & reference is null");
    return ;
  } 
  (arg1)->Set((b2Color const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  b2ParticleColor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  arg2 = *(b2ParticleColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2ParticleColor const & reference is null");
    return 0;
  } 
  result = (bool)((b2ParticleColor const *)arg1)->operator ==((b2ParticleColor const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1mix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  b2ParticleColor *arg2 = (b2ParticleColor *) (b2ParticleColor *)0 ;
  int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  arg2 = *(b2ParticleColor **)&jarg2; 
  arg3 = (int32)jarg3; 
  (arg1)->Mix(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1mixColors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  b2ParticleColor *arg1 = (b2ParticleColor *) (b2ParticleColor *)0 ;
  b2ParticleColor *arg2 = (b2ParticleColor *) (b2ParticleColor *)0 ;
  int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  arg2 = *(b2ParticleColor **)&jarg2; 
  arg3 = (int32)jarg3; 
  b2ParticleColor::MixColors(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  result = (uint8) ((arg1)->r);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  result = (uint8) ((arg1)->g);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  result = (uint8) ((arg1)->b);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  arg2 = (uint8)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleColor_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  uint8 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1; 
  result = (uint8) ((arg1)->a);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1ParticleColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2ParticleColor *arg1 = (b2ParticleColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2ParticleColor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_b2ParticleColor_1zero_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  b2ParticleColor *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleColor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2ParticleColor const & reference is null");
    return ;
  } 
  b2ParticleColor_zero = *arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_b2ParticleColor_1zero_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2ParticleColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2ParticleColor *) &b2ParticleColor_zero;
  *(b2ParticleColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1ParticleDef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2ParticleDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2ParticleDef *)new b2ParticleDef();
  *(b2ParticleDef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetPosition(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1setColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->SetColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  result = (uint32) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->position);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1velocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->velocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1velocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->velocity);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2ParticleColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  arg2 = *(b2ParticleColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2ParticleColor const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2ParticleColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  result = (b2ParticleColor *) & ((arg1)->color);
  *(b2ParticleColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1lifetime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->lifetime = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1lifetime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  result = (float32) ((arg1)->lifetime);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1group_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2ParticleGroup *arg2 = (b2ParticleGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  arg2 = *(b2ParticleGroup **)&jarg2; 
  if (arg1) (arg1)->group = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleDef_1group_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  b2ParticleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleDef **)&jarg1; 
  result = (b2ParticleGroup *) ((arg1)->group);
  *(b2ParticleGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1ParticleDef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2ParticleDef *arg1 = (b2ParticleDef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2ParticleDef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_b2CalculateParticleIterations(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  float32 arg1 ;
  float32 arg2 ;
  float32 arg3 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float32)jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  result = (int32)b2CalculateParticleIterations(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroup_1getNext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroup *arg1 = (b2ParticleGroup *) 0 ;
  b2ParticleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroup **)&jarg1; 
  result = (b2ParticleGroup *)((b2ParticleGroup const *)arg1)->GetNext();
  *(b2ParticleGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroup_1getParticleCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleGroup *arg1 = (b2ParticleGroup *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroup **)&jarg1; 
  result = (int32)((b2ParticleGroup const *)arg1)->GetParticleCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroup_1getBufferIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleGroup *arg1 = (b2ParticleGroup *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroup **)&jarg1; 
  result = (int32)((b2ParticleGroup const *)arg1)->GetBufferIndex();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroup_1getGroupFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleGroup *arg1 = (b2ParticleGroup *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroup **)&jarg1; 
  result = (int32)((b2ParticleGroup const *)arg1)->GetGroupFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1ParticleGroupDef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2ParticleGroupDef *)new b2ParticleGroupDef();
  *(b2ParticleGroupDef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1ParticleGroupDef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (uint32) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1groupFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->groupFlags = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1groupFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (uint32) ((arg1)->groupFlags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->position);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1angle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1angle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (float32) ((arg1)->angle);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1linearVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->linearVelocity = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1linearVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->linearVelocity);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1angularVelocity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->angularVelocity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1angularVelocity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (float32) ((arg1)->angularVelocity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1color_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2ParticleColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = *(b2ParticleColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2ParticleColor const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1color_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2ParticleColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (b2ParticleColor *) & ((arg1)->color);
  *(b2ParticleColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1strength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1strength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (float32) ((arg1)->strength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1shape_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Shape *arg2 = (b2Shape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = *(b2Shape **)&jarg2; 
  if (arg1) (arg1)->shape = (b2Shape const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1shape_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Shape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (b2Shape *) ((arg1)->shape);
  *(b2Shape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1shapeCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->shapeCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1shapeCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (int32) ((arg1)->shapeCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1stride_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->stride = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1stride_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (float32) ((arg1)->stride);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1particleCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->particleCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1particleCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (int32) ((arg1)->particleCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1positionData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Vec2 *arg2 = (b2Vec2 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2; 
  if (arg1) (arg1)->positionData = (b2Vec2 const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1positionData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (b2Vec2 *) ((arg1)->positionData);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1lifetime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->lifetime = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1lifetime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (float32) ((arg1)->lifetime);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1group_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2ParticleGroup *arg2 = (b2ParticleGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = *(b2ParticleGroup **)&jarg2; 
  if (arg1) (arg1)->group = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1group_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2ParticleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (b2ParticleGroup *) ((arg1)->group);
  *(b2ParticleGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1circleShapes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2CircleShape *arg2 = (b2CircleShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = *(b2CircleShape **)&jarg2; 
  if (arg1) (arg1)->circleShapes = (b2CircleShape const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1circleShapes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  b2CircleShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (b2CircleShape *) ((arg1)->circleShapes);
  *(b2CircleShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1ownShapesArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ownShapesArray = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1ownShapesArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  result = (bool) ((arg1)->ownShapesArray);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1freeShapesMemory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  (arg1)->FreeShapesMemory();
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1setCircleShapesFromVertexList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jint jarg3, jfloat jarg4) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  {
    arg2 = jenv->GetDirectBufferAddress(jarg2);
    if (arg2 == NULL) {
      SWIG_JavaThrowException(
        jenv,
        SWIG_JavaRuntimeException,
        "Unable to get address of java.nio.ByteBuffer. "
        "Is the ByteBuffer initialized?");
    }
  }
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetCircleShapesFromVertexList(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  float32 arg2 ;
  float32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  arg3 = (float32)jarg3; 
  (arg1)->SetPosition(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleGroupDef_1setColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  b2ParticleGroupDef *arg1 = (b2ParticleGroupDef *) 0 ;
  int32 arg2 ;
  int32 arg3 ;
  int32 arg4 ;
  int32 arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleGroupDef **)&jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (int32)jarg3; 
  arg4 = (int32)jarg4; 
  arg5 = (int32)jarg5; 
  (arg1)->SetColor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1createParticle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2ParticleDef *arg2 = 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = *(b2ParticleDef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2ParticleDef const & reference is null");
    return 0;
  } 
  result = (int32)(arg1)->CreateParticle((b2ParticleDef const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1joinParticleGroups(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2ParticleGroup *arg2 = (b2ParticleGroup *) 0 ;
  b2ParticleGroup *arg3 = (b2ParticleGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = *(b2ParticleGroup **)&jarg2; 
  arg3 = *(b2ParticleGroup **)&jarg3; 
  (arg1)->JoinParticleGroups(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1getParticleGroupList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2ParticleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  result = (b2ParticleGroup *)((b2ParticleSystem const *)arg1)->GetParticleGroupList();
  *(b2ParticleGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1destroyParticlesInShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2Shape *arg2 = 0 ;
  b2Transform *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = *(b2Shape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Shape const & reference is null");
    return ;
  } 
  arg3 = *(b2Transform **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Transform const & reference is null");
    return ;
  } 
  (arg1)->DestroyParticlesInShape((b2Shape const &)*arg2,(b2Transform const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1createParticleGroup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2ParticleGroupDef *arg2 = 0 ;
  b2ParticleGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = *(b2ParticleGroupDef **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2ParticleGroupDef const & reference is null");
    return 0;
  } 
  result = (b2ParticleGroup *)(arg1)->CreateParticleGroup((b2ParticleGroupDef const &)*arg2);
  *(b2ParticleGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1getParticleGroupCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  result = (int32)((b2ParticleSystem const *)arg1)->GetParticleGroupCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1getParticleCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  result = (int32)((b2ParticleSystem const *)arg1)->GetParticleCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1setMaxParticleCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = (int32)jarg2; 
  (arg1)->SetMaxParticleCount(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1setDamping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetDamping(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1setRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = (float32)jarg2; 
  (arg1)->SetRadius(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1queryShapeAABB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  b2QueryCallback *arg2 = (b2QueryCallback *) 0 ;
  b2Shape *arg3 = 0 ;
  b2Transform *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = *(b2QueryCallback **)&jarg2; 
  arg3 = *(b2Shape **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Shape const & reference is null");
    return ;
  } 
  arg4 = *(b2Transform **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Transform const & reference is null");
    return ;
  } 
  ((b2ParticleSystem const *)arg1)->QueryShapeAABB(arg2,(b2Shape const &)*arg3,(b2Transform const &)*arg4);
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1setParticleVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4) {
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 arg2 ;
  float32 arg3 ;
  float32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = (int32)jarg2; 
  arg3 = (float32)jarg3; 
  arg4 = (float32)jarg4; 
  (arg1)->SetParticleVelocity(arg2,arg3,arg4);
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1getParticlePositionX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = (int32)jarg2; 
  result = (float)((b2ParticleSystem const *)arg1)->GetParticlePositionX(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1getParticlePositionY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int32 arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = (int32)jarg2; 
  result = (float)((b2ParticleSystem const *)arg1)->GetParticlePositionY(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1copyPositionBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jobject jarg4) {
  jint jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    arg4 = jenv->GetDirectBufferAddress(jarg4);
    arg5 = jenv->GetDirectBufferCapacity(jarg4);
    if ((arg4 == NULL) && (arg5 != 0)) {
      SWIG_JavaThrowException(
        jenv,
        SWIG_JavaRuntimeException,
        "Unable to get address of java.nio.ByteBuffer. "
        "Is the ByteBuffer initialized?");
    }
  }
  result = (int)((b2ParticleSystem const *)arg1)->CopyPositionBuffer(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    if(jresult != NO_EXCEPTIONS) {
      jclass clazz = jenv->FindClass(
        g_liquidfunExceptions[jresult].jniType);
      jenv->ThrowNew(clazz, g_liquidfunExceptions[jresult].errorMsg);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1copyColorBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jobject jarg4) {
  jint jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    arg4 = jenv->GetDirectBufferAddress(jarg4);
    arg5 = jenv->GetDirectBufferCapacity(jarg4);
    if ((arg4 == NULL) && (arg5 != 0)) {
      SWIG_JavaThrowException(
        jenv,
        SWIG_JavaRuntimeException,
        "Unable to get address of java.nio.ByteBuffer. "
        "Is the ByteBuffer initialized?");
    }
  }
  result = (int)((b2ParticleSystem const *)arg1)->CopyColorBuffer(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    if(jresult != NO_EXCEPTIONS) {
      jclass clazz = jenv->FindClass(
        g_liquidfunExceptions[jresult].jniType);
      jenv->ThrowNew(clazz, g_liquidfunExceptions[jresult].errorMsg);
    }
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystem_1copyWeightBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jobject jarg4) {
  jint jresult = 0 ;
  b2ParticleSystem *arg1 = (b2ParticleSystem *) 0 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystem **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    arg4 = jenv->GetDirectBufferAddress(jarg4);
    arg5 = jenv->GetDirectBufferCapacity(jarg4);
    if ((arg4 == NULL) && (arg5 != 0)) {
      SWIG_JavaThrowException(
        jenv,
        SWIG_JavaRuntimeException,
        "Unable to get address of java.nio.ByteBuffer. "
        "Is the ByteBuffer initialized?");
    }
  }
  result = (int)((b2ParticleSystem const *)arg1)->CopyWeightBuffer(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  {
    if(jresult != NO_EXCEPTIONS) {
      jclass clazz = jenv->FindClass(
        g_liquidfunExceptions[jresult].jniType);
      jenv->ThrowNew(clazz, g_liquidfunExceptions[jresult].errorMsg);
    }
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1indexA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->indexA = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1indexA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  result = (int32) ((arg1)->indexA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1indexB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->indexB = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1indexB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  result = (int32) ((arg1)->indexB);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  result = (uint32) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1strength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1strength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  result = (float32) ((arg1)->strength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticlePair_1distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticlePair **)&jarg1; 
  result = (float32) ((arg1)->distance);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1ParticlePair(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2ParticlePair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2ParticlePair *)new b2ParticlePair();
  *(b2ParticlePair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1ParticlePair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2ParticlePair *arg1 = (b2ParticlePair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2ParticlePair **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1indexA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->indexA = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1indexA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (int32) ((arg1)->indexA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1indexB_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->indexB = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1indexB_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (int32) ((arg1)->indexB);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1indexC_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->indexC = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1indexC_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (int32) ((arg1)->indexC);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (uint32) ((arg1)->flags);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1strength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->strength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1strength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (float32) ((arg1)->strength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1pa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->pa = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1pa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->pa);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1pb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->pb = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1pb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->pb);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1pc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  b2Vec2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = *(b2Vec2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "b2Vec2 const & reference is null");
    return ;
  } 
  if (arg1) (arg1)->pc = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1pc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  b2Vec2 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (b2Vec2 *) & ((arg1)->pc);
  *(b2Vec2 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1ka_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->ka = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1ka_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (float32) ((arg1)->ka);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1kb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->kb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1kb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (float32) ((arg1)->kb);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1kc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->kc = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1kc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (float32) ((arg1)->kc);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleTriad_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  result = (float32) ((arg1)->s);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1ParticleTriad(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2ParticleTriad *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2ParticleTriad *)new b2ParticleTriad();
  *(b2ParticleTriad **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1ParticleTriad(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2ParticleTriad *arg1 = (b2ParticleTriad *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2ParticleTriad **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_new_1ParticleSystemDef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  b2ParticleSystemDef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (b2ParticleSystemDef *)new b2ParticleSystemDef();
  *(b2ParticleSystemDef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1strictContactCheck_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->strictContactCheck = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1strictContactCheck_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (bool) ((arg1)->strictContactCheck);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1density_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->density = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1density_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->density);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1gravityScale_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->gravityScale = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1gravityScale_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->gravityScale);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1radius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1radius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->radius);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1maxCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->maxCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1maxCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (int32) ((arg1)->maxCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1pressureStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->pressureStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1pressureStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->pressureStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1dampingStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->dampingStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1dampingStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->dampingStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1elasticStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->elasticStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1elasticStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->elasticStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1springStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->springStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1springStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->springStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1viscousStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->viscousStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1viscousStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->viscousStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1surfaceTensionPressureStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->surfaceTensionPressureStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1surfaceTensionPressureStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->surfaceTensionPressureStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1surfaceTensionNormalStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->surfaceTensionNormalStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1surfaceTensionNormalStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->surfaceTensionNormalStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1repulsiveStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->repulsiveStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1repulsiveStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->repulsiveStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1powderStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->powderStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1powderStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->powderStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1ejectionStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->ejectionStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1ejectionStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->ejectionStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1staticPressureStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->staticPressureStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1staticPressureStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->staticPressureStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1staticPressureRelaxation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->staticPressureRelaxation = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1staticPressureRelaxation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->staticPressureRelaxation);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1staticPressureIterations_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (int32)jarg2; 
  if (arg1) (arg1)->staticPressureIterations = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1staticPressureIterations_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (int32) ((arg1)->staticPressureIterations);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1colorMixingStrength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->colorMixingStrength = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1colorMixingStrength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->colorMixingStrength);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1destroyByAge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->destroyByAge = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1destroyByAge_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (bool) ((arg1)->destroyByAge);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1lifetimeGranularity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  arg2 = (float32)jarg2; 
  if (arg1) (arg1)->lifetimeGranularity = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_ParticleSystemDef_1lifetimeGranularity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  float32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  result = (float32) ((arg1)->lifetimeGranularity);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_delete_1ParticleSystemDef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  b2ParticleSystemDef *arg1 = (b2ParticleSystemDef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(b2ParticleSystemDef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_CircleShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(b2Shape **)&baseptr = *(b2CircleShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_EdgeShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(b2Shape **)&baseptr = *(b2EdgeShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_PolygonShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(b2Shape **)&baseptr = *(b2PolygonShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_com_google_fpl_liquidfun_liquidfunJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[9] = {
    {
      "SwigDirector_Draw_drawPolygon", "(Lcom/google/fpl/liquidfun/Draw;[BIJ)V" 
    },
    {
      "SwigDirector_Draw_drawSolidPolygon", "(Lcom/google/fpl/liquidfun/Draw;[BIJ)V" 
    },
    {
      "SwigDirector_Draw_drawCircle", "(Lcom/google/fpl/liquidfun/Draw;JFJ)V" 
    },
    {
      "SwigDirector_Draw_drawSolidCircle", "(Lcom/google/fpl/liquidfun/Draw;JFJJ)V" 
    },
    {
      "SwigDirector_Draw_drawParticles", "(Lcom/google/fpl/liquidfun/Draw;[BF[BI)V" 
    },
    {
      "SwigDirector_Draw_drawSegment", "(Lcom/google/fpl/liquidfun/Draw;JJJ)V" 
    },
    {
      "SwigDirector_Draw_drawTransform", "(Lcom/google/fpl/liquidfun/Draw;J)V" 
    },
    {
      "SwigDirector_QueryCallback_reportFixture", "(Lcom/google/fpl/liquidfun/QueryCallback;J)Z" 
    },
    {
      "SwigDirector_QueryCallback_reportParticle", "(Lcom/google/fpl/liquidfun/QueryCallback;JI)Z" 
    }
  };
  Swig::jclass_liquidfunJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_liquidfunJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

